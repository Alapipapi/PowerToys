parameters:
  - name: additionalBuildOptions
    type: string
    default: ''
  - name: buildConfigurations
    type: object
    default:
      - Release
  - name: buildPlatforms
    type: object
    default:
      - x64
      - arm64
  - name: codeSign
    type: boolean
    default: false
  - name: artifactStem
    type: string
    default: ''
  - name: jobName
    type: string
    default: 'Build'
  - name: condition
    type: string
    default: ''
  - name: dependsOn
    type: object
    default: []
  - name: pool
    type: object
    default: []
  - name: beforeBuildSteps
    type: stepList
    default: []
  - name: variables
    type: object
    default: {}
  - name: publishArtifacts
    type: boolean
    default: true
  - name: signingIdentity
    type: object
    default: {}
  - name: enablePackageCaching
    type: boolean
    default: false
  - name: enableMsBuildCaching
    type: boolean
    default: false
  - name: runTests
    type: boolean
    default: true

  - name: versionNumber
    type: string
    default: '0.0.1'
  - name: csProjectsToPublish
    type: object
    default:
      - 'src/settings-ui/Settings.UI/PowerToys.Settings.csproj'
      - 'src/modules/launcher/PowerLauncher/PowerLauncher.csproj'
      - 'src/modules/previewpane/MonacoPreviewHandler/MonacoPreviewHandler.csproj'
      - 'src/modules/previewpane/MarkdownPreviewHandler/MarkdownPreviewHandler.csproj'
      - 'src/modules/previewpane/SvgPreviewHandler/SvgPreviewHandler.csproj'
      - 'src/modules/previewpane/SvgThumbnailProvider/SvgThumbnailProvider.csproj'
      - 'src/modules/FileLocksmith/FileLocksmithUI/FileLocksmithUI.csproj'

jobs:
- job: ${{ parameters.jobName }}
  ${{ if ne(length(parameters.pool), 0) }}:
    pool: ${{ parameters.pool }}
  dependsOn: ${{ parameters.dependsOn }}
  condition: ${{ parameters.condition }}
  strategy:
    matrix:
      ${{ each config in parameters.buildConfigurations }}:
        ${{ each platform in parameters.buildPlatforms }}:
          ${{ config }}_${{ platform }}:
            BuildConfiguration: ${{ config }}
            BuildPlatform: ${{ platform }}
            ${{ if eq(platform, 'x86') }}:
              OutputBuildPlatform: Win32
            ${{ elseif eq(platform, 'Any CPU') }}:
              OutputBuildPlatform: AnyCPU
            ${{ else }}:
              OutputBuildPlatform: ${{ platform }}
  variables:
    # Azure DevOps abhors a vacuum
    # If these are blank, expansion will fail later on... which will result in direct substitution of the variable *names*
    # later on. We'll just... set them to a single space and if we need to, check IsNullOrWhiteSpace.
    # Yup.
    MSBuildCacheParameters: ' '
    JobOutputDirectory: $(Build.ArtifactStagingDirectory)
    LogOutputDirectory: $(Build.ArtifactStagingDirectory)\logs
    JobOutputArtifactName: build-$(BuildPlatform)-$(BuildConfiguration)${{ parameters.artifactStem }}
    NUGET_RESTORE_MSBUILD_ARGS: /p:Platform=$(BuildPlatform) # Required for nuget to work due to self contained
    NODE_OPTIONS: --max_old_space_size=16384
    ${{ if eq(parameters.runTests, true) }}:
      MSBuildMainBuildTargets: Build;Test
    ${{ else }}:
      MSBuildMainBuildTargets: Build
    ${{ insert }}: ${{ parameters.variables }}
  displayName: Build
  timeoutInMinutes: 240
  cancelTimeoutInMinutes: 1
  templateContext: # Required when this template is hosted in 1ES PT
    outputs:
    - output: pipelineArtifact
      artifactName: $(JobOutputArtifactName)
      targetPath: $(Build.ArtifactStagingDirectory)
  steps:
  - checkout: self
    clean: true
    submodules: true
    persistCredentials: True
    fetchTags: false
    fetchDepth: 1

  - ${{ if eq(parameters.enableMsBuildCaching, true) }}:
    - pwsh: |-
        $MSBuildCacheParameters = ""
        $MSBuildCacheParameters += " -graph"
        $MSBuildCacheParameters += " -reportfileaccesses"
        $MSBuildCacheParameters += " -p:MSBuildCacheEnabled=true"
        $MSBuildCacheParameters += " -p:MSBuildCacheLogDirectory=$(LogOutputDirectory)\MSBuildCacheLogs"
        Write-Host "MSBuildCacheParameters: $MSBuildCacheParameters"
        Write-Host "##vso[task.setvariable variable=MSBuildCacheParameters]$MSBuildCacheParameters"
      displayName: Prepare MSBuildCache variables

  - ${{ if eq(parameters.codeSign, true) }}:
    # Only required if we're using ESRP
    - template: steps-ensure-dotnet-version.yml
      parameters:
        sdk: true
        version: '6.0'

  - template: steps-ensure-dotnet-version.yml
    parameters:
      sdk: true
      version: '8.0'

  - ${{ if eq(parameters.runTests, true) }}:
    - task: VisualStudioTestPlatformInstaller@1
      displayName: Ensure VSTest Platform

  - ${{ if eq(parameters.enablePackageCaching, true) }}:
    - task: Cache@2
      displayName: 'Cache nuget packages (PackageReference)'
      inputs:
        key: '"PackageReference" | "$(Agent.OS)" | Directory.Packages.props'
        restoreKeys: |
           "PackageReference" | "$(Agent.OS)"
           "PackageReference"
        path: $(NUGET_PACKAGES)

    - task: Cache@2
      displayName: 'Cache nuget packages (packages.config)'
      inputs:
        key: '"packages.config" | "$(Agent.OS)" | **/packages.config'
        restoreKeys: |
           "packages.config" | "$(Agent.OS)"
           "packages.config"
        path: packages

  - template: .\steps-restore-nuget.yml

  - pwsh: |-
      & "$(build.sourcesdirectory)\.pipelines\verifyAndSetLatestVCToolsVersion.ps1"
    displayName: Work around DD-1541167 (VCToolsVersion)

  - pwsh: |-
      & "$(build.sourcesdirectory)\.pipelines\installWiX.ps1"
    displayName: Download and install WiX 3.14 development build

  - ${{ parameters.beforeBuildSteps }}

  - task: VSBuild@1
    ${{ if eq(parameters.runTests, true) }}:
      displayName: Build and Test PowerToys main project
    ${{ else }}:
      displayName: Build PowerToys main project
    inputs:
      solution: 'PowerToys.sln'
      vsVersion: 17.0
      msbuildArgs: >-
        -restore -graph
        /p:RestorePackagesConfig=true
        /p:CIBuild=true
        /bl:$(LogOutputDirectory)\build-0-main.binlog
        ${{ parameters.additionalBuildOptions }}
        $(MSBuildCacheParameters)
        /t:$(MSBuildMainBuildTargets)
      platform: $(BuildPlatform)
      configuration: $(BuildConfiguration)
      msbuildArchitecture: x64
      maximumCpuCount: true
    ${{ if eq(parameters.enableMsBuildCaching, true) }}:
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)

  - ${{ if eq(parameters.codeSign, true) }}:
    - template: steps-esrp-signing.yml
      parameters:
        displayName: Sign Utilities
        signingIdentity: ${{ parameters.signingIdentity }}
        inputs:
          FolderPath: 'src/modules'
          signType: batchSigning
          batchSignPolicyFile: '$(build.sourcesdirectory)\.pipelines\ESRPSigning_abstracted_utils_dll.json'
          ciPolicyFile: '$(build.sourcesdirectory)\.pipelines\CIPolicy.xml'

  - task: VSBuild@1
    displayName: Create Hosts File Editor package
    inputs:
      solution: '**\HostsUILib.csproj'
      vsVersion: 17.0
      msbuildArgs: /p:CIBuild=true;NoBuild=true -t:pack /bl:$(LogOutputDirectory)\build-hosts.binlog
      configuration: $(BuildConfiguration)
      msbuildArchitecture: x64
      maximumCpuCount: true
    ${{ if eq(parameters.enableMsBuildCaching, true) }}:
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)

  - task: VSBuild@1
    displayName: Create Environment Variables Editor package
    inputs:
      solution: '**\EnvironmentVariablesUILib.csproj'
      vsVersion: 17.0
      msbuildArgs: /p:CIBuild=true;NoBuild=true -t:pack /bl:$(LogOutputDirectory)\build-env-var-editor.binlog
      configuration: $(BuildConfiguration)
      msbuildArchitecture: x64
      maximumCpuCount: true
    ${{ if eq(parameters.enableMsBuildCaching, true) }}:
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)

  - task: VSBuild@1
    displayName: Create Registry Preview package
    inputs:
      solution: '**\RegistryPreviewUILib.csproj'
      vsVersion: 17.0
      msbuildArgs: /p:CIBuild=true;NoBuild=true -t:pack /bl:$(LogOutputDirectory)\build-registry-preview.binlog
      configuration: $(BuildConfiguration)
      msbuildArchitecture: x64
      maximumCpuCount: true
    ${{ if eq(parameters.enableMsBuildCaching, true) }}:
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)

  - task: CopyFiles@2
    displayName: Stage NuGet packages
    inputs:
      contents: "**/bin/Release/PowerToys*.nupkg"
      flattenFolders: True
      targetFolder: $(JobOutputDirectory)/nupkg

  - ${{ if eq(parameters.publishArtifacts, true) }}:
    - publish: $(JobOutputDirectory)
      artifact: $(JobOutputArtifactName)
      displayName: Publish all outputs
      condition: always()
