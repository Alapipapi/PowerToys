// Copyright (c) Microsoft Corporation
// The Microsoft Corporation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Xml;
using Microsoft.CodeAnalysis;

namespace Settings.SourceGenerators
{
    [Generator]
    public class SettingsSourceGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            string[] navItems = new string[] { "Hosts" };

            if (!context.AnalyzerConfigOptions.GlobalOptions.TryGetValue("build_property.ProjectPath", out var projectPath) || projectPath is null)
            {
                return;
            }

            StringBuilder source = new StringBuilder(@"// <auto-generated />
using System;
using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using Settings.Ui.VNext.Helpers;

namespace Settings.Ui.VNext
{
    public static class GeneratedFunctions
    {
        public static void PopulateNavigationItems(NavigationView navigationView)
        {");

            foreach (var item in navItems)
            {
                XmlDocument doc = new XmlDocument();
                doc.Load($"{projectPath}/ConfigFiles/{item}.xml");
                string moduleName = doc.SelectSingleNode("ModuleSettings").Attributes["Name"].Value;
                string iconUri = doc.SelectSingleNode("ModuleSettings").Attributes["Icon"].Value;

                source.Append(
                    $@"
                    NavigationViewItem navigationViewItem = new();
                    var loader = ResourceLoaderInstance.ResourceLoader;
                    navigationViewItem.Content = loader.GetString(""Shell_{moduleName}/Content"");
                    navigationViewItem.Icon = new BitmapIcon()  {{ UriSource = new Uri(""{iconUri}""), ShowAsMonochrome = false }};
                    navigationView.MenuItems.Add(navigationViewItem);
");
            }

            source.Append(@"}
    }
}");

            context.AddSource("GeneratedFunctions.g.cs", source.ToString());
        }

        public void Initialize(GeneratorInitializationContext context)
        {
        }
    }
}
